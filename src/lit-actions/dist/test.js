/**
 * DO NOT EDIT THIS FILE. IT IS GENERATED ON BUILD. RUN `yarn generate-lit-actions` IN THE ROOT DIRECTORY TO UPDATE THIS FILE.
 * 
 * @type { string } code - Lit Action code. You want to use the content in the "code" constant and NOT the content of this file.
 * 
 */
export const code = "\"use strict\";\n(() => {\n  var __create = Object.create;\n  var __defProp = Object.defineProperty;\n  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __getProtoOf = Object.getPrototypeOf;\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\n  var __esm = (fn, res) => function __init() {\n    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;\n  };\n  var __commonJS = (cb, mod2) => function __require() {\n    return mod2 || (0, cb[__getOwnPropNames(cb)[0]])((mod2 = { exports: {} }).exports, mod2), mod2.exports;\n  };\n  var __copyProps = (to, from, except, desc) => {\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n      for (let key of __getOwnPropNames(from))\n        if (!__hasOwnProp.call(to, key) && key !== except)\n          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n    }\n    return to;\n  };\n  var __toESM = (mod2, isNodeMode, target) => (target = mod2 != null ? __create(__getProtoOf(mod2)) : {}, __copyProps(\n    // If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod2 || !mod2.__esModule ? __defProp(target, \"default\", { value: mod2, enumerable: true }) : target,\n    mod2\n  ));\n\n  // node_modules/base64-js/index.js\n  var require_base64_js = __commonJS({\n    \"node_modules/base64-js/index.js\"(exports) {\n      \"use strict\";\n      init_buffer_shim();\n      exports.byteLength = byteLength;\n      exports.toByteArray = toByteArray;\n      exports.fromByteArray = fromByteArray;\n      var lookup = [];\n      var revLookup = [];\n      var Arr = typeof Uint8Array !== \"undefined\" ? Uint8Array : Array;\n      var code = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n      for (i = 0, len = code.length; i < len; ++i) {\n        lookup[i] = code[i];\n        revLookup[code.charCodeAt(i)] = i;\n      }\n      var i;\n      var len;\n      revLookup[\"-\".charCodeAt(0)] = 62;\n      revLookup[\"_\".charCodeAt(0)] = 63;\n      function getLens(b64) {\n        var len2 = b64.length;\n        if (len2 % 4 > 0) {\n          throw new Error(\"Invalid string. Length must be a multiple of 4\");\n        }\n        var validLen = b64.indexOf(\"=\");\n        if (validLen === -1) validLen = len2;\n        var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;\n        return [validLen, placeHoldersLen];\n      }\n      function byteLength(b64) {\n        var lens = getLens(b64);\n        var validLen = lens[0];\n        var placeHoldersLen = lens[1];\n        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n      }\n      function _byteLength(b64, validLen, placeHoldersLen) {\n        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n      }\n      function toByteArray(b64) {\n        var tmp;\n        var lens = getLens(b64);\n        var validLen = lens[0];\n        var placeHoldersLen = lens[1];\n        var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n        var curByte = 0;\n        var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;\n        var i2;\n        for (i2 = 0; i2 < len2; i2 += 4) {\n          tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];\n          arr[curByte++] = tmp >> 16 & 255;\n          arr[curByte++] = tmp >> 8 & 255;\n          arr[curByte++] = tmp & 255;\n        }\n        if (placeHoldersLen === 2) {\n          tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;\n          arr[curByte++] = tmp & 255;\n        }\n        if (placeHoldersLen === 1) {\n          tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;\n          arr[curByte++] = tmp >> 8 & 255;\n          arr[curByte++] = tmp & 255;\n        }\n        return arr;\n      }\n      function tripletToBase64(num) {\n        return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];\n      }\n      function encodeChunk(uint8, start, end) {\n        var tmp;\n        var output2 = [];\n        for (var i2 = start; i2 < end; i2 += 3) {\n          tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);\n          output2.push(tripletToBase64(tmp));\n        }\n        return output2.join(\"\");\n      }\n      function fromByteArray(uint8) {\n        var tmp;\n        var len2 = uint8.length;\n        var extraBytes = len2 % 3;\n        var parts = [];\n        var maxChunkLength = 16383;\n        for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {\n          parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));\n        }\n        if (extraBytes === 1) {\n          tmp = uint8[len2 - 1];\n          parts.push(\n            lookup[tmp >> 2] + lookup[tmp << 4 & 63] + \"==\"\n          );\n        } else if (extraBytes === 2) {\n          tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];\n          parts.push(\n            lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + \"=\"\n          );\n        }\n        return parts.join(\"\");\n      }\n    }\n  });\n\n  // node_modules/ieee754/index.js\n  var require_ieee754 = __commonJS({\n    \"node_modules/ieee754/index.js\"(exports) {\n      init_buffer_shim();\n      exports.read = function(buffer, offset, isLE2, mLen, nBytes) {\n        var e, m;\n        var eLen = nBytes * 8 - mLen - 1;\n        var eMax = (1 << eLen) - 1;\n        var eBias = eMax >> 1;\n        var nBits = -7;\n        var i = isLE2 ? nBytes - 1 : 0;\n        var d = isLE2 ? -1 : 1;\n        var s = buffer[offset + i];\n        i += d;\n        e = s & (1 << -nBits) - 1;\n        s >>= -nBits;\n        nBits += eLen;\n        for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {\n        }\n        m = e & (1 << -nBits) - 1;\n        e >>= -nBits;\n        nBits += mLen;\n        for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {\n        }\n        if (e === 0) {\n          e = 1 - eBias;\n        } else if (e === eMax) {\n          return m ? NaN : (s ? -1 : 1) * Infinity;\n        } else {\n          m = m + Math.pow(2, mLen);\n          e = e - eBias;\n        }\n        return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n      };\n      exports.write = function(buffer, value, offset, isLE2, mLen, nBytes) {\n        var e, m, c;\n        var eLen = nBytes * 8 - mLen - 1;\n        var eMax = (1 << eLen) - 1;\n        var eBias = eMax >> 1;\n        var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n        var i = isLE2 ? 0 : nBytes - 1;\n        var d = isLE2 ? 1 : -1;\n        var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n        value = Math.abs(value);\n        if (isNaN(value) || value === Infinity) {\n          m = isNaN(value) ? 1 : 0;\n          e = eMax;\n        } else {\n          e = Math.floor(Math.log(value) / Math.LN2);\n          if (value * (c = Math.pow(2, -e)) < 1) {\n            e--;\n            c *= 2;\n          }\n          if (e + eBias >= 1) {\n            value += rt / c;\n          } else {\n            value += rt * Math.pow(2, 1 - eBias);\n          }\n          if (value * c >= 2) {\n            e++;\n            c /= 2;\n          }\n          if (e + eBias >= eMax) {\n            m = 0;\n            e = eMax;\n          } else if (e + eBias >= 1) {\n            m = (value * c - 1) * Math.pow(2, mLen);\n            e = e + eBias;\n          } else {\n            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n            e = 0;\n          }\n        }\n        for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {\n        }\n        e = e << mLen | m;\n        eLen += mLen;\n        for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {\n        }\n        buffer[offset + i - d] |= s * 128;\n      };\n    }\n  });\n\n  // node_modules/buffer/index.js\n  var require_buffer = __commonJS({\n    \"node_modules/buffer/index.js\"(exports) {\n      \"use strict\";\n      init_buffer_shim();\n      var base64 = require_base64_js();\n      var ieee754 = require_ieee754();\n      var customInspectSymbol = typeof Symbol === \"function\" && typeof Symbol[\"for\"] === \"function\" ? Symbol[\"for\"](\"nodejs.util.inspect.custom\") : null;\n      exports.Buffer = Buffer3;\n      exports.SlowBuffer = SlowBuffer;\n      exports.INSPECT_MAX_BYTES = 50;\n      var K_MAX_LENGTH = 2147483647;\n      exports.kMaxLength = K_MAX_LENGTH;\n      Buffer3.TYPED_ARRAY_SUPPORT = typedArraySupport();\n      if (!Buffer3.TYPED_ARRAY_SUPPORT && typeof console !== \"undefined\" && typeof console.error === \"function\") {\n        console.error(\n          \"This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.\"\n        );\n      }\n      function typedArraySupport() {\n        try {\n          var arr = new Uint8Array(1);\n          var proto = { foo: function() {\n            return 42;\n          } };\n          Object.setPrototypeOf(proto, Uint8Array.prototype);\n          Object.setPrototypeOf(arr, proto);\n          return arr.foo() === 42;\n        } catch (e) {\n          return false;\n        }\n      }\n      Object.defineProperty(Buffer3.prototype, \"parent\", {\n        enumerable: true,\n        get: function() {\n          if (!Buffer3.isBuffer(this)) return void 0;\n          return this.buffer;\n        }\n      });\n      Object.defineProperty(Buffer3.prototype, \"offset\", {\n        enumerable: true,\n        get: function() {\n          if (!Buffer3.isBuffer(this)) return void 0;\n          return this.byteOffset;\n        }\n      });\n      function createBuffer(length) {\n        if (length > K_MAX_LENGTH) {\n          throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"');\n        }\n        var buf = new Uint8Array(length);\n        Object.setPrototypeOf(buf, Buffer3.prototype);\n        return buf;\n      }\n      function Buffer3(arg, encodingOrOffset, length) {\n        if (typeof arg === \"number\") {\n          if (typeof encodingOrOffset === \"string\") {\n            throw new TypeError(\n              'The \"string\" argument must be of type string. Received type number'\n            );\n          }\n          return allocUnsafe(arg);\n        }\n        return from(arg, encodingOrOffset, length);\n      }\n      Buffer3.poolSize = 8192;\n      function from(value, encodingOrOffset, length) {\n        if (typeof value === \"string\") {\n          return fromString(value, encodingOrOffset);\n        }\n        if (ArrayBuffer.isView(value)) {\n          return fromArrayView(value);\n        }\n        if (value == null) {\n          throw new TypeError(\n            \"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof value\n          );\n        }\n        if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {\n          return fromArrayBuffer(value, encodingOrOffset, length);\n        }\n        if (typeof SharedArrayBuffer !== \"undefined\" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {\n          return fromArrayBuffer(value, encodingOrOffset, length);\n        }\n        if (typeof value === \"number\") {\n          throw new TypeError(\n            'The \"value\" argument must not be of type number. Received type number'\n          );\n        }\n        var valueOf = value.valueOf && value.valueOf();\n        if (valueOf != null && valueOf !== value) {\n          return Buffer3.from(valueOf, encodingOrOffset, length);\n        }\n        var b = fromObject(value);\n        if (b) return b;\n        if (typeof Symbol !== \"undefined\" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === \"function\") {\n          return Buffer3.from(\n            value[Symbol.toPrimitive](\"string\"),\n            encodingOrOffset,\n            length\n          );\n        }\n        throw new TypeError(\n          \"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof value\n        );\n      }\n      Buffer3.from = function(value, encodingOrOffset, length) {\n        return from(value, encodingOrOffset, length);\n      };\n      Object.setPrototypeOf(Buffer3.prototype, Uint8Array.prototype);\n      Object.setPrototypeOf(Buffer3, Uint8Array);\n      function assertSize(size) {\n        if (typeof size !== \"number\") {\n          throw new TypeError('\"size\" argument must be of type number');\n        } else if (size < 0) {\n          throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"');\n        }\n      }\n      function alloc(size, fill, encoding) {\n        assertSize(size);\n        if (size <= 0) {\n          return createBuffer(size);\n        }\n        if (fill !== void 0) {\n          return typeof encoding === \"string\" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);\n        }\n        return createBuffer(size);\n      }\n      Buffer3.alloc = function(size, fill, encoding) {\n        return alloc(size, fill, encoding);\n      };\n      function allocUnsafe(size) {\n        assertSize(size);\n        return createBuffer(size < 0 ? 0 : checked(size) | 0);\n      }\n      Buffer3.allocUnsafe = function(size) {\n        return allocUnsafe(size);\n      };\n      Buffer3.allocUnsafeSlow = function(size) {\n        return allocUnsafe(size);\n      };\n      function fromString(string, encoding) {\n        if (typeof encoding !== \"string\" || encoding === \"\") {\n          encoding = \"utf8\";\n        }\n        if (!Buffer3.isEncoding(encoding)) {\n          throw new TypeError(\"Unknown encoding: \" + encoding);\n        }\n        var length = byteLength(string, encoding) | 0;\n        var buf = createBuffer(length);\n        var actual = buf.write(string, encoding);\n        if (actual !== length) {\n          buf = buf.slice(0, actual);\n        }\n        return buf;\n      }\n      function fromArrayLike(array) {\n        var length = array.length < 0 ? 0 : checked(array.length) | 0;\n        var buf = createBuffer(length);\n        for (var i = 0; i < length; i += 1) {\n          buf[i] = array[i] & 255;\n        }\n        return buf;\n      }\n      function fromArrayView(arrayView) {\n        if (isInstance(arrayView, Uint8Array)) {\n          var copy = new Uint8Array(arrayView);\n          return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);\n        }\n        return fromArrayLike(arrayView);\n      }\n      function fromArrayBuffer(array, byteOffset, length) {\n        if (byteOffset < 0 || array.byteLength < byteOffset) {\n          throw new RangeError('\"offset\" is outside of buffer bounds');\n        }\n        if (array.byteLength < byteOffset + (length || 0)) {\n          throw new RangeError('\"length\" is outside of buffer bounds');\n        }\n        var buf;\n        if (byteOffset === void 0 && length === void 0) {\n          buf = new Uint8Array(array);\n        } else if (length === void 0) {\n          buf = new Uint8Array(array, byteOffset);\n        } else {\n          buf = new Uint8Array(array, byteOffset, length);\n        }\n        Object.setPrototypeOf(buf, Buffer3.prototype);\n        return buf;\n      }\n      function fromObject(obj) {\n        if (Buffer3.isBuffer(obj)) {\n          var len = checked(obj.length) | 0;\n          var buf = createBuffer(len);\n          if (buf.length === 0) {\n            return buf;\n          }\n          obj.copy(buf, 0, 0, len);\n          return buf;\n        }\n        if (obj.length !== void 0) {\n          if (typeof obj.length !== \"number\" || numberIsNaN(obj.length)) {\n            return createBuffer(0);\n          }\n          return fromArrayLike(obj);\n        }\n        if (obj.type === \"Buffer\" && Array.isArray(obj.data)) {\n          return fromArrayLike(obj.data);\n        }\n      }\n      function checked(length) {\n        if (length >= K_MAX_LENGTH) {\n          throw new RangeError(\"Attempt to allocate Buffer larger than maximum size: 0x\" + K_MAX_LENGTH.toString(16) + \" bytes\");\n        }\n        return length | 0;\n      }\n      function SlowBuffer(length) {\n        if (+length != length) {\n          length = 0;\n        }\n        return Buffer3.alloc(+length);\n      }\n      Buffer3.isBuffer = function isBuffer(b) {\n        return b != null && b._isBuffer === true && b !== Buffer3.prototype;\n      };\n      Buffer3.compare = function compare(a, b) {\n        if (isInstance(a, Uint8Array)) a = Buffer3.from(a, a.offset, a.byteLength);\n        if (isInstance(b, Uint8Array)) b = Buffer3.from(b, b.offset, b.byteLength);\n        if (!Buffer3.isBuffer(a) || !Buffer3.isBuffer(b)) {\n          throw new TypeError(\n            'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n          );\n        }\n        if (a === b) return 0;\n        var x = a.length;\n        var y = b.length;\n        for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n          if (a[i] !== b[i]) {\n            x = a[i];\n            y = b[i];\n            break;\n          }\n        }\n        if (x < y) return -1;\n        if (y < x) return 1;\n        return 0;\n      };\n      Buffer3.isEncoding = function isEncoding(encoding) {\n        switch (String(encoding).toLowerCase()) {\n          case \"hex\":\n          case \"utf8\":\n          case \"utf-8\":\n          case \"ascii\":\n          case \"latin1\":\n          case \"binary\":\n          case \"base64\":\n          case \"ucs2\":\n          case \"ucs-2\":\n          case \"utf16le\":\n          case \"utf-16le\":\n            return true;\n          default:\n            return false;\n        }\n      };\n      Buffer3.concat = function concat(list, length) {\n        if (!Array.isArray(list)) {\n          throw new TypeError('\"list\" argument must be an Array of Buffers');\n        }\n        if (list.length === 0) {\n          return Buffer3.alloc(0);\n        }\n        var i;\n        if (length === void 0) {\n          length = 0;\n          for (i = 0; i < list.length; ++i) {\n            length += list[i].length;\n          }\n        }\n        var buffer = Buffer3.allocUnsafe(length);\n        var pos = 0;\n        for (i = 0; i < list.length; ++i) {\n          var buf = list[i];\n          if (isInstance(buf, Uint8Array)) {\n            if (pos + buf.length > buffer.length) {\n              Buffer3.from(buf).copy(buffer, pos);\n            } else {\n              Uint8Array.prototype.set.call(\n                buffer,\n                buf,\n                pos\n              );\n            }\n          } else if (!Buffer3.isBuffer(buf)) {\n            throw new TypeError('\"list\" argument must be an Array of Buffers');\n          } else {\n            buf.copy(buffer, pos);\n          }\n          pos += buf.length;\n        }\n        return buffer;\n      };\n      function byteLength(string, encoding) {\n        if (Buffer3.isBuffer(string)) {\n          return string.length;\n        }\n        if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n          return string.byteLength;\n        }\n        if (typeof string !== \"string\") {\n          throw new TypeError(\n            'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string\n          );\n        }\n        var len = string.length;\n        var mustMatch = arguments.length > 2 && arguments[2] === true;\n        if (!mustMatch && len === 0) return 0;\n        var loweredCase = false;\n        for (; ; ) {\n          switch (encoding) {\n            case \"ascii\":\n            case \"latin1\":\n            case \"binary\":\n              return len;\n            case \"utf8\":\n            case \"utf-8\":\n              return utf8ToBytes2(string).length;\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n              return len * 2;\n            case \"hex\":\n              return len >>> 1;\n            case \"base64\":\n              return base64ToBytes(string).length;\n            default:\n              if (loweredCase) {\n                return mustMatch ? -1 : utf8ToBytes2(string).length;\n              }\n              encoding = (\"\" + encoding).toLowerCase();\n              loweredCase = true;\n          }\n        }\n      }\n      Buffer3.byteLength = byteLength;\n      function slowToString(encoding, start, end) {\n        var loweredCase = false;\n        if (start === void 0 || start < 0) {\n          start = 0;\n        }\n        if (start > this.length) {\n          return \"\";\n        }\n        if (end === void 0 || end > this.length) {\n          end = this.length;\n        }\n        if (end <= 0) {\n          return \"\";\n        }\n        end >>>= 0;\n        start >>>= 0;\n        if (end <= start) {\n          return \"\";\n        }\n        if (!encoding) encoding = \"utf8\";\n        while (true) {\n          switch (encoding) {\n            case \"hex\":\n              return hexSlice(this, start, end);\n            case \"utf8\":\n            case \"utf-8\":\n              return utf8Slice(this, start, end);\n            case \"ascii\":\n              return asciiSlice(this, start, end);\n            case \"latin1\":\n            case \"binary\":\n              return latin1Slice(this, start, end);\n            case \"base64\":\n              return base64Slice(this, start, end);\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n              return utf16leSlice(this, start, end);\n            default:\n              if (loweredCase) throw new TypeError(\"Unknown encoding: \" + encoding);\n              encoding = (encoding + \"\").toLowerCase();\n              loweredCase = true;\n          }\n        }\n      }\n      Buffer3.prototype._isBuffer = true;\n      function swap(b, n, m) {\n        var i = b[n];\n        b[n] = b[m];\n        b[m] = i;\n      }\n      Buffer3.prototype.swap16 = function swap16() {\n        var len = this.length;\n        if (len % 2 !== 0) {\n          throw new RangeError(\"Buffer size must be a multiple of 16-bits\");\n        }\n        for (var i = 0; i < len; i += 2) {\n          swap(this, i, i + 1);\n        }\n        return this;\n      };\n      Buffer3.prototype.swap32 = function swap32() {\n        var len = this.length;\n        if (len % 4 !== 0) {\n          throw new RangeError(\"Buffer size must be a multiple of 32-bits\");\n        }\n        for (var i = 0; i < len; i += 4) {\n          swap(this, i, i + 3);\n          swap(this, i + 1, i + 2);\n        }\n        return this;\n      };\n      Buffer3.prototype.swap64 = function swap64() {\n        var len = this.length;\n        if (len % 8 !== 0) {\n          throw new RangeError(\"Buffer size must be a multiple of 64-bits\");\n        }\n        for (var i = 0; i < len; i += 8) {\n          swap(this, i, i + 7);\n          swap(this, i + 1, i + 6);\n          swap(this, i + 2, i + 5);\n          swap(this, i + 3, i + 4);\n        }\n        return this;\n      };\n      Buffer3.prototype.toString = function toString() {\n        var length = this.length;\n        if (length === 0) return \"\";\n        if (arguments.length === 0) return utf8Slice(this, 0, length);\n        return slowToString.apply(this, arguments);\n      };\n      Buffer3.prototype.toLocaleString = Buffer3.prototype.toString;\n      Buffer3.prototype.equals = function equals(b) {\n        if (!Buffer3.isBuffer(b)) throw new TypeError(\"Argument must be a Buffer\");\n        if (this === b) return true;\n        return Buffer3.compare(this, b) === 0;\n      };\n      Buffer3.prototype.inspect = function inspect() {\n        var str = \"\";\n        var max = exports.INSPECT_MAX_BYTES;\n        str = this.toString(\"hex\", 0, max).replace(/(.{2})/g, \"$1 \").trim();\n        if (this.length > max) str += \" ... \";\n        return \"<Buffer \" + str + \">\";\n      };\n      if (customInspectSymbol) {\n        Buffer3.prototype[customInspectSymbol] = Buffer3.prototype.inspect;\n      }\n      Buffer3.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\n        if (isInstance(target, Uint8Array)) {\n          target = Buffer3.from(target, target.offset, target.byteLength);\n        }\n        if (!Buffer3.isBuffer(target)) {\n          throw new TypeError(\n            'The \"target\" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target\n          );\n        }\n        if (start === void 0) {\n          start = 0;\n        }\n        if (end === void 0) {\n          end = target ? target.length : 0;\n        }\n        if (thisStart === void 0) {\n          thisStart = 0;\n        }\n        if (thisEnd === void 0) {\n          thisEnd = this.length;\n        }\n        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n          throw new RangeError(\"out of range index\");\n        }\n        if (thisStart >= thisEnd && start >= end) {\n          return 0;\n        }\n        if (thisStart >= thisEnd) {\n          return -1;\n        }\n        if (start >= end) {\n          return 1;\n        }\n        start >>>= 0;\n        end >>>= 0;\n        thisStart >>>= 0;\n        thisEnd >>>= 0;\n        if (this === target) return 0;\n        var x = thisEnd - thisStart;\n        var y = end - start;\n        var len = Math.min(x, y);\n        var thisCopy = this.slice(thisStart, thisEnd);\n        var targetCopy = target.slice(start, end);\n        for (var i = 0; i < len; ++i) {\n          if (thisCopy[i] !== targetCopy[i]) {\n            x = thisCopy[i];\n            y = targetCopy[i];\n            break;\n          }\n        }\n        if (x < y) return -1;\n        if (y < x) return 1;\n        return 0;\n      };\n      function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\n        if (buffer.length === 0) return -1;\n        if (typeof byteOffset === \"string\") {\n          encoding = byteOffset;\n          byteOffset = 0;\n        } else if (byteOffset > 2147483647) {\n          byteOffset = 2147483647;\n        } else if (byteOffset < -2147483648) {\n          byteOffset = -2147483648;\n        }\n        byteOffset = +byteOffset;\n        if (numberIsNaN(byteOffset)) {\n          byteOffset = dir ? 0 : buffer.length - 1;\n        }\n        if (byteOffset < 0) byteOffset = buffer.length + byteOffset;\n        if (byteOffset >= buffer.length) {\n          if (dir) return -1;\n          else byteOffset = buffer.length - 1;\n        } else if (byteOffset < 0) {\n          if (dir) byteOffset = 0;\n          else return -1;\n        }\n        if (typeof val === \"string\") {\n          val = Buffer3.from(val, encoding);\n        }\n        if (Buffer3.isBuffer(val)) {\n          if (val.length === 0) {\n            return -1;\n          }\n          return arrayIndexOf(buffer, val, byteOffset, encoding, dir);\n        } else if (typeof val === \"number\") {\n          val = val & 255;\n          if (typeof Uint8Array.prototype.indexOf === \"function\") {\n            if (dir) {\n              return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);\n            } else {\n              return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);\n            }\n          }\n          return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);\n        }\n        throw new TypeError(\"val must be string, number or Buffer\");\n      }\n      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n        var indexSize = 1;\n        var arrLength = arr.length;\n        var valLength = val.length;\n        if (encoding !== void 0) {\n          encoding = String(encoding).toLowerCase();\n          if (encoding === \"ucs2\" || encoding === \"ucs-2\" || encoding === \"utf16le\" || encoding === \"utf-16le\") {\n            if (arr.length < 2 || val.length < 2) {\n              return -1;\n            }\n            indexSize = 2;\n            arrLength /= 2;\n            valLength /= 2;\n            byteOffset /= 2;\n          }\n        }\n        function read(buf, i2) {\n          if (indexSize === 1) {\n            return buf[i2];\n          } else {\n            return buf.readUInt16BE(i2 * indexSize);\n          }\n        }\n        var i;\n        if (dir) {\n          var foundIndex = -1;\n          for (i = byteOffset; i < arrLength; i++) {\n            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n              if (foundIndex === -1) foundIndex = i;\n              if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;\n            } else {\n              if (foundIndex !== -1) i -= i - foundIndex;\n              foundIndex = -1;\n            }\n          }\n        } else {\n          if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\n          for (i = byteOffset; i >= 0; i--) {\n            var found = true;\n            for (var j = 0; j < valLength; j++) {\n              if (read(arr, i + j) !== read(val, j)) {\n                found = false;\n                break;\n              }\n            }\n            if (found) return i;\n          }\n        }\n        return -1;\n      }\n      Buffer3.prototype.includes = function includes(val, byteOffset, encoding) {\n        return this.indexOf(val, byteOffset, encoding) !== -1;\n      };\n      Buffer3.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n      };\n      Buffer3.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n      };\n      function hexWrite(buf, string, offset, length) {\n        offset = Number(offset) || 0;\n        var remaining = buf.length - offset;\n        if (!length) {\n          length = remaining;\n        } else {\n          length = Number(length);\n          if (length > remaining) {\n            length = remaining;\n          }\n        }\n        var strLen = string.length;\n        if (length > strLen / 2) {\n          length = strLen / 2;\n        }\n        for (var i = 0; i < length; ++i) {\n          var parsed = parseInt(string.substr(i * 2, 2), 16);\n          if (numberIsNaN(parsed)) return i;\n          buf[offset + i] = parsed;\n        }\n        return i;\n      }\n      function utf8Write(buf, string, offset, length) {\n        return blitBuffer(utf8ToBytes2(string, buf.length - offset), buf, offset, length);\n      }\n      function asciiWrite(buf, string, offset, length) {\n        return blitBuffer(asciiToBytes(string), buf, offset, length);\n      }\n      function base64Write(buf, string, offset, length) {\n        return blitBuffer(base64ToBytes(string), buf, offset, length);\n      }\n      function ucs2Write(buf, string, offset, length) {\n        return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);\n      }\n      Buffer3.prototype.write = function write(string, offset, length, encoding) {\n        if (offset === void 0) {\n          encoding = \"utf8\";\n          length = this.length;\n          offset = 0;\n        } else if (length === void 0 && typeof offset === \"string\") {\n          encoding = offset;\n          length = this.length;\n          offset = 0;\n        } else if (isFinite(offset)) {\n          offset = offset >>> 0;\n          if (isFinite(length)) {\n            length = length >>> 0;\n            if (encoding === void 0) encoding = \"utf8\";\n          } else {\n            encoding = length;\n            length = void 0;\n          }\n        } else {\n          throw new Error(\n            \"Buffer.write(string, encoding, offset[, length]) is no longer supported\"\n          );\n        }\n        var remaining = this.length - offset;\n        if (length === void 0 || length > remaining) length = remaining;\n        if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\n          throw new RangeError(\"Attempt to write outside buffer bounds\");\n        }\n        if (!encoding) encoding = \"utf8\";\n        var loweredCase = false;\n        for (; ; ) {\n          switch (encoding) {\n            case \"hex\":\n              return hexWrite(this, string, offset, length);\n            case \"utf8\":\n            case \"utf-8\":\n              return utf8Write(this, string, offset, length);\n            case \"ascii\":\n            case \"latin1\":\n            case \"binary\":\n              return asciiWrite(this, string, offset, length);\n            case \"base64\":\n              return base64Write(this, string, offset, length);\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n              return ucs2Write(this, string, offset, length);\n            default:\n              if (loweredCase) throw new TypeError(\"Unknown encoding: \" + encoding);\n              encoding = (\"\" + encoding).toLowerCase();\n              loweredCase = true;\n          }\n        }\n      };\n      Buffer3.prototype.toJSON = function toJSON() {\n        return {\n          type: \"Buffer\",\n          data: Array.prototype.slice.call(this._arr || this, 0)\n        };\n      };\n      function base64Slice(buf, start, end) {\n        if (start === 0 && end === buf.length) {\n          return base64.fromByteArray(buf);\n        } else {\n          return base64.fromByteArray(buf.slice(start, end));\n        }\n      }\n      function utf8Slice(buf, start, end) {\n        end = Math.min(buf.length, end);\n        var res = [];\n        var i = start;\n        while (i < end) {\n          var firstByte = buf[i];\n          var codePoint = null;\n          var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;\n          if (i + bytesPerSequence <= end) {\n            var secondByte, thirdByte, fourthByte, tempCodePoint;\n            switch (bytesPerSequence) {\n              case 1:\n                if (firstByte < 128) {\n                  codePoint = firstByte;\n                }\n                break;\n              case 2:\n                secondByte = buf[i + 1];\n                if ((secondByte & 192) === 128) {\n                  tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;\n                  if (tempCodePoint > 127) {\n                    codePoint = tempCodePoint;\n                  }\n                }\n                break;\n              case 3:\n                secondByte = buf[i + 1];\n                thirdByte = buf[i + 2];\n                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {\n                  tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;\n                  if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {\n                    codePoint = tempCodePoint;\n                  }\n                }\n                break;\n              case 4:\n                secondByte = buf[i + 1];\n                thirdByte = buf[i + 2];\n                fourthByte = buf[i + 3];\n                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {\n                  tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;\n                  if (tempCodePoint > 65535 && tempCodePoint < 1114112) {\n                    codePoint = tempCodePoint;\n                  }\n                }\n            }\n          }\n          if (codePoint === null) {\n            codePoint = 65533;\n            bytesPerSequence = 1;\n          } else if (codePoint > 65535) {\n            codePoint -= 65536;\n            res.push(codePoint >>> 10 & 1023 | 55296);\n            codePoint = 56320 | codePoint & 1023;\n          }\n          res.push(codePoint);\n          i += bytesPerSequence;\n        }\n        return decodeCodePointsArray(res);\n      }\n      var MAX_ARGUMENTS_LENGTH = 4096;\n      function decodeCodePointsArray(codePoints) {\n        var len = codePoints.length;\n        if (len <= MAX_ARGUMENTS_LENGTH) {\n          return String.fromCharCode.apply(String, codePoints);\n        }\n        var res = \"\";\n        var i = 0;\n        while (i < len) {\n          res += String.fromCharCode.apply(\n            String,\n            codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n          );\n        }\n        return res;\n      }\n      function asciiSlice(buf, start, end) {\n        var ret = \"\";\n        end = Math.min(buf.length, end);\n        for (var i = start; i < end; ++i) {\n          ret += String.fromCharCode(buf[i] & 127);\n        }\n        return ret;\n      }\n      function latin1Slice(buf, start, end) {\n        var ret = \"\";\n        end = Math.min(buf.length, end);\n        for (var i = start; i < end; ++i) {\n          ret += String.fromCharCode(buf[i]);\n        }\n        return ret;\n      }\n      function hexSlice(buf, start, end) {\n        var len = buf.length;\n        if (!start || start < 0) start = 0;\n        if (!end || end < 0 || end > len) end = len;\n        var out = \"\";\n        for (var i = start; i < end; ++i) {\n          out += hexSliceLookupTable[buf[i]];\n        }\n        return out;\n      }\n      function utf16leSlice(buf, start, end) {\n        var bytes2 = buf.slice(start, end);\n        var res = \"\";\n        for (var i = 0; i < bytes2.length - 1; i += 2) {\n          res += String.fromCharCode(bytes2[i] + bytes2[i + 1] * 256);\n        }\n        return res;\n      }\n      Buffer3.prototype.slice = function slice(start, end) {\n        var len = this.length;\n        start = ~~start;\n        end = end === void 0 ? len : ~~end;\n        if (start < 0) {\n          start += len;\n          if (start < 0) start = 0;\n        } else if (start > len) {\n          start = len;\n        }\n        if (end < 0) {\n          end += len;\n          if (end < 0) end = 0;\n        } else if (end > len) {\n          end = len;\n        }\n        if (end < start) end = start;\n        var newBuf = this.subarray(start, end);\n        Object.setPrototypeOf(newBuf, Buffer3.prototype);\n        return newBuf;\n      };\n      function checkOffset(offset, ext, length) {\n        if (offset % 1 !== 0 || offset < 0) throw new RangeError(\"offset is not uint\");\n        if (offset + ext > length) throw new RangeError(\"Trying to access beyond buffer length\");\n      }\n      Buffer3.prototype.readUintLE = Buffer3.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert) checkOffset(offset, byteLength2, this.length);\n        var val = this[offset];\n        var mul = 1;\n        var i = 0;\n        while (++i < byteLength2 && (mul *= 256)) {\n          val += this[offset + i] * mul;\n        }\n        return val;\n      };\n      Buffer3.prototype.readUintBE = Buffer3.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert) {\n          checkOffset(offset, byteLength2, this.length);\n        }\n        var val = this[offset + --byteLength2];\n        var mul = 1;\n        while (byteLength2 > 0 && (mul *= 256)) {\n          val += this[offset + --byteLength2] * mul;\n        }\n        return val;\n      };\n      Buffer3.prototype.readUint8 = Buffer3.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) checkOffset(offset, 1, this.length);\n        return this[offset];\n      };\n      Buffer3.prototype.readUint16LE = Buffer3.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) checkOffset(offset, 2, this.length);\n        return this[offset] | this[offset + 1] << 8;\n      };\n      Buffer3.prototype.readUint16BE = Buffer3.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) checkOffset(offset, 2, this.length);\n        return this[offset] << 8 | this[offset + 1];\n      };\n      Buffer3.prototype.readUint32LE = Buffer3.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) checkOffset(offset, 4, this.length);\n        return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;\n      };\n      Buffer3.prototype.readUint32BE = Buffer3.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) checkOffset(offset, 4, this.length);\n        return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\n      };\n      Buffer3.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert) checkOffset(offset, byteLength2, this.length);\n        var val = this[offset];\n        var mul = 1;\n        var i = 0;\n        while (++i < byteLength2 && (mul *= 256)) {\n          val += this[offset + i] * mul;\n        }\n        mul *= 128;\n        if (val >= mul) val -= Math.pow(2, 8 * byteLength2);\n        return val;\n      };\n      Buffer3.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert) checkOffset(offset, byteLength2, this.length);\n        var i = byteLength2;\n        var mul = 1;\n        var val = this[offset + --i];\n        while (i > 0 && (mul *= 256)) {\n          val += this[offset + --i] * mul;\n        }\n        mul *= 128;\n        if (val >= mul) val -= Math.pow(2, 8 * byteLength2);\n        return val;\n      };\n      Buffer3.prototype.readInt8 = function readInt8(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) checkOffset(offset, 1, this.length);\n        if (!(this[offset] & 128)) return this[offset];\n        return (255 - this[offset] + 1) * -1;\n      };\n      Buffer3.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) checkOffset(offset, 2, this.length);\n        var val = this[offset] | this[offset + 1] << 8;\n        return val & 32768 ? val | 4294901760 : val;\n      };\n      Buffer3.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) checkOffset(offset, 2, this.length);\n        var val = this[offset + 1] | this[offset] << 8;\n        return val & 32768 ? val | 4294901760 : val;\n      };\n      Buffer3.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) checkOffset(offset, 4, this.length);\n        return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\n      };\n      Buffer3.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) checkOffset(offset, 4, this.length);\n        return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\n      };\n      Buffer3.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) checkOffset(offset, 4, this.length);\n        return ieee754.read(this, offset, true, 23, 4);\n      };\n      Buffer3.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) checkOffset(offset, 4, this.length);\n        return ieee754.read(this, offset, false, 23, 4);\n      };\n      Buffer3.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) checkOffset(offset, 8, this.length);\n        return ieee754.read(this, offset, true, 52, 8);\n      };\n      Buffer3.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) checkOffset(offset, 8, this.length);\n        return ieee754.read(this, offset, false, 52, 8);\n      };\n      function checkInt(buf, value, offset, ext, max, min) {\n        if (!Buffer3.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance');\n        if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds');\n        if (offset + ext > buf.length) throw new RangeError(\"Index out of range\");\n      }\n      Buffer3.prototype.writeUintLE = Buffer3.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert) {\n          var maxBytes = Math.pow(2, 8 * byteLength2) - 1;\n          checkInt(this, value, offset, byteLength2, maxBytes, 0);\n        }\n        var mul = 1;\n        var i = 0;\n        this[offset] = value & 255;\n        while (++i < byteLength2 && (mul *= 256)) {\n          this[offset + i] = value / mul & 255;\n        }\n        return offset + byteLength2;\n      };\n      Buffer3.prototype.writeUintBE = Buffer3.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        byteLength2 = byteLength2 >>> 0;\n        if (!noAssert) {\n          var maxBytes = Math.pow(2, 8 * byteLength2) - 1;\n          checkInt(this, value, offset, byteLength2, maxBytes, 0);\n        }\n        var i = byteLength2 - 1;\n        var mul = 1;\n        this[offset + i] = value & 255;\n        while (--i >= 0 && (mul *= 256)) {\n          this[offset + i] = value / mul & 255;\n        }\n        return offset + byteLength2;\n      };\n      Buffer3.prototype.writeUint8 = Buffer3.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) checkInt(this, value, offset, 1, 255, 0);\n        this[offset] = value & 255;\n        return offset + 1;\n      };\n      Buffer3.prototype.writeUint16LE = Buffer3.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);\n        this[offset] = value & 255;\n        this[offset + 1] = value >>> 8;\n        return offset + 2;\n      };\n      Buffer3.prototype.writeUint16BE = Buffer3.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);\n        this[offset] = value >>> 8;\n        this[offset + 1] = value & 255;\n        return offset + 2;\n      };\n      Buffer3.prototype.writeUint32LE = Buffer3.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);\n        this[offset + 3] = value >>> 24;\n        this[offset + 2] = value >>> 16;\n        this[offset + 1] = value >>> 8;\n        this[offset] = value & 255;\n        return offset + 4;\n      };\n      Buffer3.prototype.writeUint32BE = Buffer3.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);\n        this[offset] = value >>> 24;\n        this[offset + 1] = value >>> 16;\n        this[offset + 2] = value >>> 8;\n        this[offset + 3] = value & 255;\n        return offset + 4;\n      };\n      Buffer3.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n          var limit = Math.pow(2, 8 * byteLength2 - 1);\n          checkInt(this, value, offset, byteLength2, limit - 1, -limit);\n        }\n        var i = 0;\n        var mul = 1;\n        var sub = 0;\n        this[offset] = value & 255;\n        while (++i < byteLength2 && (mul *= 256)) {\n          if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n            sub = 1;\n          }\n          this[offset + i] = (value / mul >> 0) - sub & 255;\n        }\n        return offset + byteLength2;\n      };\n      Buffer3.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n          var limit = Math.pow(2, 8 * byteLength2 - 1);\n          checkInt(this, value, offset, byteLength2, limit - 1, -limit);\n        }\n        var i = byteLength2 - 1;\n        var mul = 1;\n        var sub = 0;\n        this[offset + i] = value & 255;\n        while (--i >= 0 && (mul *= 256)) {\n          if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n            sub = 1;\n          }\n          this[offset + i] = (value / mul >> 0) - sub & 255;\n        }\n        return offset + byteLength2;\n      };\n      Buffer3.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) checkInt(this, value, offset, 1, 127, -128);\n        if (value < 0) value = 255 + value + 1;\n        this[offset] = value & 255;\n        return offset + 1;\n      };\n      Buffer3.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);\n        this[offset] = value & 255;\n        this[offset + 1] = value >>> 8;\n        return offset + 2;\n      };\n      Buffer3.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);\n        this[offset] = value >>> 8;\n        this[offset + 1] = value & 255;\n        return offset + 2;\n      };\n      Buffer3.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);\n        this[offset] = value & 255;\n        this[offset + 1] = value >>> 8;\n        this[offset + 2] = value >>> 16;\n        this[offset + 3] = value >>> 24;\n        return offset + 4;\n      };\n      Buffer3.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);\n        if (value < 0) value = 4294967295 + value + 1;\n        this[offset] = value >>> 24;\n        this[offset + 1] = value >>> 16;\n        this[offset + 2] = value >>> 8;\n        this[offset + 3] = value & 255;\n        return offset + 4;\n      };\n      function checkIEEE754(buf, value, offset, ext, max, min) {\n        if (offset + ext > buf.length) throw new RangeError(\"Index out of range\");\n        if (offset < 0) throw new RangeError(\"Index out of range\");\n      }\n      function writeFloat(buf, value, offset, littleEndian, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n          checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);\n        }\n        ieee754.write(buf, value, offset, littleEndian, 23, 4);\n        return offset + 4;\n      }\n      Buffer3.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n        return writeFloat(this, value, offset, true, noAssert);\n      };\n      Buffer3.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n        return writeFloat(this, value, offset, false, noAssert);\n      };\n      function writeDouble(buf, value, offset, littleEndian, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n          checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);\n        }\n        ieee754.write(buf, value, offset, littleEndian, 52, 8);\n        return offset + 8;\n      }\n      Buffer3.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\n        return writeDouble(this, value, offset, true, noAssert);\n      };\n      Buffer3.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\n        return writeDouble(this, value, offset, false, noAssert);\n      };\n      Buffer3.prototype.copy = function copy(target, targetStart, start, end) {\n        if (!Buffer3.isBuffer(target)) throw new TypeError(\"argument should be a Buffer\");\n        if (!start) start = 0;\n        if (!end && end !== 0) end = this.length;\n        if (targetStart >= target.length) targetStart = target.length;\n        if (!targetStart) targetStart = 0;\n        if (end > 0 && end < start) end = start;\n        if (end === start) return 0;\n        if (target.length === 0 || this.length === 0) return 0;\n        if (targetStart < 0) {\n          throw new RangeError(\"targetStart out of bounds\");\n        }\n        if (start < 0 || start >= this.length) throw new RangeError(\"Index out of range\");\n        if (end < 0) throw new RangeError(\"sourceEnd out of bounds\");\n        if (end > this.length) end = this.length;\n        if (target.length - targetStart < end - start) {\n          end = target.length - targetStart + start;\n        }\n        var len = end - start;\n        if (this === target && typeof Uint8Array.prototype.copyWithin === \"function\") {\n          this.copyWithin(targetStart, start, end);\n        } else {\n          Uint8Array.prototype.set.call(\n            target,\n            this.subarray(start, end),\n            targetStart\n          );\n        }\n        return len;\n      };\n      Buffer3.prototype.fill = function fill(val, start, end, encoding) {\n        if (typeof val === \"string\") {\n          if (typeof start === \"string\") {\n            encoding = start;\n            start = 0;\n            end = this.length;\n          } else if (typeof end === \"string\") {\n            encoding = end;\n            end = this.length;\n          }\n          if (encoding !== void 0 && typeof encoding !== \"string\") {\n            throw new TypeError(\"encoding must be a string\");\n          }\n          if (typeof encoding === \"string\" && !Buffer3.isEncoding(encoding)) {\n            throw new TypeError(\"Unknown encoding: \" + encoding);\n          }\n          if (val.length === 1) {\n            var code = val.charCodeAt(0);\n            if (encoding === \"utf8\" && code < 128 || encoding === \"latin1\") {\n              val = code;\n            }\n          }\n        } else if (typeof val === \"number\") {\n          val = val & 255;\n        } else if (typeof val === \"boolean\") {\n          val = Number(val);\n        }\n        if (start < 0 || this.length < start || this.length < end) {\n          throw new RangeError(\"Out of range index\");\n        }\n        if (end <= start) {\n          return this;\n        }\n        start = start >>> 0;\n        end = end === void 0 ? this.length : end >>> 0;\n        if (!val) val = 0;\n        var i;\n        if (typeof val === \"number\") {\n          for (i = start; i < end; ++i) {\n            this[i] = val;\n          }\n        } else {\n          var bytes2 = Buffer3.isBuffer(val) ? val : Buffer3.from(val, encoding);\n          var len = bytes2.length;\n          if (len === 0) {\n            throw new TypeError('The value \"' + val + '\" is invalid for argument \"value\"');\n          }\n          for (i = 0; i < end - start; ++i) {\n            this[i + start] = bytes2[i % len];\n          }\n        }\n        return this;\n      };\n      var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;\n      function base64clean(str) {\n        str = str.split(\"=\")[0];\n        str = str.trim().replace(INVALID_BASE64_RE, \"\");\n        if (str.length < 2) return \"\";\n        while (str.length % 4 !== 0) {\n          str = str + \"=\";\n        }\n        return str;\n      }\n      function utf8ToBytes2(string, units) {\n        units = units || Infinity;\n        var codePoint;\n        var length = string.length;\n        var leadSurrogate = null;\n        var bytes2 = [];\n        for (var i = 0; i < length; ++i) {\n          codePoint = string.charCodeAt(i);\n          if (codePoint > 55295 && codePoint < 57344) {\n            if (!leadSurrogate) {\n              if (codePoint > 56319) {\n                if ((units -= 3) > -1) bytes2.push(239, 191, 189);\n                continue;\n              } else if (i + 1 === length) {\n                if ((units -= 3) > -1) bytes2.push(239, 191, 189);\n                continue;\n              }\n              leadSurrogate = codePoint;\n              continue;\n            }\n            if (codePoint < 56320) {\n              if ((units -= 3) > -1) bytes2.push(239, 191, 189);\n              leadSurrogate = codePoint;\n              continue;\n            }\n            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;\n          } else if (leadSurrogate) {\n            if ((units -= 3) > -1) bytes2.push(239, 191, 189);\n          }\n          leadSurrogate = null;\n          if (codePoint < 128) {\n            if ((units -= 1) < 0) break;\n            bytes2.push(codePoint);\n          } else if (codePoint < 2048) {\n            if ((units -= 2) < 0) break;\n            bytes2.push(\n              codePoint >> 6 | 192,\n              codePoint & 63 | 128\n            );\n          } else if (codePoint < 65536) {\n            if ((units -= 3) < 0) break;\n            bytes2.push(\n              codePoint >> 12 | 224,\n              codePoint >> 6 & 63 | 128,\n              codePoint & 63 | 128\n            );\n          } else if (codePoint < 1114112) {\n            if ((units -= 4) < 0) break;\n            bytes2.push(\n              codePoint >> 18 | 240,\n              codePoint >> 12 & 63 | 128,\n              codePoint >> 6 & 63 | 128,\n              codePoint & 63 | 128\n            );\n          } else {\n            throw new Error(\"Invalid code point\");\n          }\n        }\n        return bytes2;\n      }\n      function asciiToBytes(str) {\n        var byteArray = [];\n        for (var i = 0; i < str.length; ++i) {\n          byteArray.push(str.charCodeAt(i) & 255);\n        }\n        return byteArray;\n      }\n      function utf16leToBytes(str, units) {\n        var c, hi, lo;\n        var byteArray = [];\n        for (var i = 0; i < str.length; ++i) {\n          if ((units -= 2) < 0) break;\n          c = str.charCodeAt(i);\n          hi = c >> 8;\n          lo = c % 256;\n          byteArray.push(lo);\n          byteArray.push(hi);\n        }\n        return byteArray;\n      }\n      function base64ToBytes(str) {\n        return base64.toByteArray(base64clean(str));\n      }\n      function blitBuffer(src, dst, offset, length) {\n        for (var i = 0; i < length; ++i) {\n          if (i + offset >= dst.length || i >= src.length) break;\n          dst[i + offset] = src[i];\n        }\n        return i;\n      }\n      function isInstance(obj, type) {\n        return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;\n      }\n      function numberIsNaN(obj) {\n        return obj !== obj;\n      }\n      var hexSliceLookupTable = function() {\n        var alphabet = \"0123456789abcdef\";\n        var table = new Array(256);\n        for (var i = 0; i < 16; ++i) {\n          var i16 = i * 16;\n          for (var j = 0; j < 16; ++j) {\n            table[i16 + j] = alphabet[i] + alphabet[j];\n          }\n        }\n        return table;\n      }();\n    }\n  });\n\n  // buffer.shim.js\n  var import_buffer;\n  var init_buffer_shim = __esm({\n    \"buffer.shim.js\"() {\n      \"use strict\";\n      import_buffer = __toESM(require_buffer(), 1);\n      globalThis.Buffer = import_buffer.Buffer;\n    }\n  });\n\n  // src/lit-actions/test.ts\n  init_buffer_shim();\n\n  // node_modules/@noble/post-quantum/esm/ml-dsa.js\n  init_buffer_shim();\n\n  // node_modules/@noble/post-quantum/node_modules/@noble/hashes/esm/sha3.js\n  init_buffer_shim();\n\n  // node_modules/@noble/post-quantum/node_modules/@noble/hashes/esm/_assert.js\n  init_buffer_shim();\n  function number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n      throw new Error(`positive integer expected, not ${n}`);\n  }\n  function isBytes(a) {\n    return a instanceof Uint8Array || a != null && typeof a === \"object\" && a.constructor.name === \"Uint8Array\";\n  }\n  function bytes(b, ...lengths) {\n    if (!isBytes(b))\n      throw new Error(\"Uint8Array expected\");\n    if (lengths.length > 0 && !lengths.includes(b.length))\n      throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);\n  }\n  function exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n      throw new Error(\"Hash instance has been destroyed\");\n    if (checkFinished && instance.finished)\n      throw new Error(\"Hash#digest() has already been called\");\n  }\n  function output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n      throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n  }\n\n  // node_modules/@noble/post-quantum/node_modules/@noble/hashes/esm/_u64.js\n  init_buffer_shim();\n  var U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\n  var _32n = /* @__PURE__ */ BigInt(32);\n  function fromBig(n, le = false) {\n    if (le)\n      return { h: Number(n & U32_MASK64), l: Number(n >> _32n & U32_MASK64) };\n    return { h: Number(n >> _32n & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n  }\n  function split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n      const { h, l } = fromBig(lst[i], le);\n      [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n  }\n  var rotlSH = (h, l, s) => h << s | l >>> 32 - s;\n  var rotlSL = (h, l, s) => l << s | h >>> 32 - s;\n  var rotlBH = (h, l, s) => l << s - 32 | h >>> 64 - s;\n  var rotlBL = (h, l, s) => h << s - 32 | l >>> 64 - s;\n\n  // node_modules/@noble/post-quantum/node_modules/@noble/hashes/esm/utils.js\n  init_buffer_shim();\n\n  // node_modules/@noble/post-quantum/node_modules/@noble/hashes/esm/crypto.js\n  init_buffer_shim();\n  var crypto = typeof globalThis === \"object\" && \"crypto\" in globalThis ? globalThis.crypto : void 0;\n\n  // node_modules/@noble/post-quantum/node_modules/@noble/hashes/esm/utils.js\n  var u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n  var isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;\n  var byteSwap = (word) => word << 24 & 4278190080 | word << 8 & 16711680 | word >>> 8 & 65280 | word >>> 24 & 255;\n  function byteSwap32(arr) {\n    for (let i = 0; i < arr.length; i++) {\n      arr[i] = byteSwap(arr[i]);\n    }\n  }\n  function utf8ToBytes(str) {\n    if (typeof str !== \"string\")\n      throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str));\n  }\n  function toBytes(data) {\n    if (typeof data === \"string\")\n      data = utf8ToBytes(data);\n    bytes(data);\n    return data;\n  }\n  var Hash = class {\n    // Safe version that clones internal state\n    clone() {\n      return this._cloneInto();\n    }\n  };\n  var toStr = {}.toString;\n  function wrapConstructor(hashCons) {\n    const hashC = (msg2) => hashCons().update(toBytes(msg2)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n  }\n  function wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg2, opts) => hashCons(opts).update(toBytes(msg2)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n  }\n  function randomBytes(bytesLength = 32) {\n    if (crypto && typeof crypto.getRandomValues === \"function\") {\n      return crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    throw new Error(\"crypto.getRandomValues must be defined\");\n  }\n\n  // node_modules/@noble/post-quantum/node_modules/@noble/hashes/esm/sha3.js\n  var SHA3_PI = [];\n  var SHA3_ROTL = [];\n  var _SHA3_IOTA = [];\n  var _0n = /* @__PURE__ */ BigInt(0);\n  var _1n = /* @__PURE__ */ BigInt(1);\n  var _2n = /* @__PURE__ */ BigInt(2);\n  var _7n = /* @__PURE__ */ BigInt(7);\n  var _256n = /* @__PURE__ */ BigInt(256);\n  var _0x71n = /* @__PURE__ */ BigInt(113);\n  for (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n      R = (R << _1n ^ (R >> _7n) * _0x71n) % _256n;\n      if (R & _2n)\n        t ^= _1n << (_1n << /* @__PURE__ */ BigInt(j)) - _1n;\n    }\n    _SHA3_IOTA.push(t);\n  }\n  var [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);\n  var rotlH = (h, l, s) => s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s);\n  var rotlL = (h, l, s) => s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s);\n  function keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    for (let round = 24 - rounds; round < 24; round++) {\n      for (let x = 0; x < 10; x++)\n        B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n      for (let x = 0; x < 10; x += 2) {\n        const idx1 = (x + 8) % 10;\n        const idx0 = (x + 2) % 10;\n        const B0 = B[idx0];\n        const B1 = B[idx0 + 1];\n        const Th = rotlH(B0, B1, 1) ^ B[idx1];\n        const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n        for (let y = 0; y < 50; y += 10) {\n          s[x + y] ^= Th;\n          s[x + y + 1] ^= Tl;\n        }\n      }\n      let curH = s[2];\n      let curL = s[3];\n      for (let t = 0; t < 24; t++) {\n        const shift = SHA3_ROTL[t];\n        const Th = rotlH(curH, curL, shift);\n        const Tl = rotlL(curH, curL, shift);\n        const PI = SHA3_PI[t];\n        curH = s[PI];\n        curL = s[PI + 1];\n        s[PI] = Th;\n        s[PI + 1] = Tl;\n      }\n      for (let y = 0; y < 50; y += 10) {\n        for (let x = 0; x < 10; x++)\n          B[x] = s[y + x];\n        for (let x = 0; x < 10; x++)\n          s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n      }\n      s[0] ^= SHA3_IOTA_H[round];\n      s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n  }\n  var Keccak = class _Keccak extends Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n      super();\n      this.blockLen = blockLen;\n      this.suffix = suffix;\n      this.outputLen = outputLen;\n      this.enableXOF = enableXOF;\n      this.rounds = rounds;\n      this.pos = 0;\n      this.posOut = 0;\n      this.finished = false;\n      this.destroyed = false;\n      number(outputLen);\n      if (0 >= this.blockLen || this.blockLen >= 200)\n        throw new Error(\"Sha3 supports only keccak-f1600 function\");\n      this.state = new Uint8Array(200);\n      this.state32 = u32(this.state);\n    }\n    keccak() {\n      if (!isLE)\n        byteSwap32(this.state32);\n      keccakP(this.state32, this.rounds);\n      if (!isLE)\n        byteSwap32(this.state32);\n      this.posOut = 0;\n      this.pos = 0;\n    }\n    update(data) {\n      exists(this);\n      const { blockLen, state } = this;\n      data = toBytes(data);\n      const len = data.length;\n      for (let pos = 0; pos < len; ) {\n        const take = Math.min(blockLen - this.pos, len - pos);\n        for (let i = 0; i < take; i++)\n          state[this.pos++] ^= data[pos++];\n        if (this.pos === blockLen)\n          this.keccak();\n      }\n      return this;\n    }\n    finish() {\n      if (this.finished)\n        return;\n      this.finished = true;\n      const { state, suffix, pos, blockLen } = this;\n      state[pos] ^= suffix;\n      if ((suffix & 128) !== 0 && pos === blockLen - 1)\n        this.keccak();\n      state[blockLen - 1] ^= 128;\n      this.keccak();\n    }\n    writeInto(out) {\n      exists(this, false);\n      bytes(out);\n      this.finish();\n      const bufferOut = this.state;\n      const { blockLen } = this;\n      for (let pos = 0, len = out.length; pos < len; ) {\n        if (this.posOut >= blockLen)\n          this.keccak();\n        const take = Math.min(blockLen - this.posOut, len - pos);\n        out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n        this.posOut += take;\n        pos += take;\n      }\n      return out;\n    }\n    xofInto(out) {\n      if (!this.enableXOF)\n        throw new Error(\"XOF is not possible for this instance\");\n      return this.writeInto(out);\n    }\n    xof(bytes2) {\n      number(bytes2);\n      return this.xofInto(new Uint8Array(bytes2));\n    }\n    digestInto(out) {\n      output(out, this);\n      if (this.finished)\n        throw new Error(\"digest() was already called\");\n      this.writeInto(out);\n      this.destroy();\n      return out;\n    }\n    digest() {\n      return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n      this.destroyed = true;\n      this.state.fill(0);\n    }\n    _cloneInto(to) {\n      const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n      to || (to = new _Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n      to.state32.set(this.state32);\n      to.pos = this.pos;\n      to.posOut = this.posOut;\n      to.finished = this.finished;\n      to.rounds = rounds;\n      to.suffix = suffix;\n      to.outputLen = outputLen;\n      to.enableXOF = enableXOF;\n      to.destroyed = this.destroyed;\n      return to;\n    }\n  };\n  var gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\n  var sha3_224 = /* @__PURE__ */ gen(6, 144, 224 / 8);\n  var sha3_256 = /* @__PURE__ */ gen(6, 136, 256 / 8);\n  var sha3_384 = /* @__PURE__ */ gen(6, 104, 384 / 8);\n  var sha3_512 = /* @__PURE__ */ gen(6, 72, 512 / 8);\n  var keccak_224 = /* @__PURE__ */ gen(1, 144, 224 / 8);\n  var keccak_256 = /* @__PURE__ */ gen(1, 136, 256 / 8);\n  var keccak_384 = /* @__PURE__ */ gen(1, 104, 384 / 8);\n  var keccak_512 = /* @__PURE__ */ gen(1, 72, 512 / 8);\n  var genShake = (suffix, blockLen, outputLen) => wrapXOFConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));\n  var shake128 = /* @__PURE__ */ genShake(31, 168, 128 / 8);\n  var shake256 = /* @__PURE__ */ genShake(31, 136, 256 / 8);\n\n  // node_modules/@noble/post-quantum/esm/_crystals.js\n  init_buffer_shim();\n\n  // node_modules/@noble/post-quantum/esm/utils.js\n  init_buffer_shim();\n  var ensureBytes = bytes;\n  var randomBytes2 = randomBytes;\n  function equalBytes(a, b) {\n    if (a.length !== b.length)\n      return false;\n    let diff = 0;\n    for (let i = 0; i < a.length; i++)\n      diff |= a[i] ^ b[i];\n    return diff === 0;\n  }\n  function splitCoder(...lengths) {\n    const getLength = (c) => typeof c === \"number\" ? c : c.bytesLen;\n    const bytesLen = lengths.reduce((sum, a) => sum + getLength(a), 0);\n    return {\n      bytesLen,\n      encode: (bufs) => {\n        const res = new Uint8Array(bytesLen);\n        for (let i = 0, pos = 0; i < lengths.length; i++) {\n          const c = lengths[i];\n          const l = getLength(c);\n          const b = typeof c === \"number\" ? bufs[i] : c.encode(bufs[i]);\n          ensureBytes(b, l);\n          res.set(b, pos);\n          if (typeof c !== \"number\")\n            b.fill(0);\n          pos += l;\n        }\n        return res;\n      },\n      decode: (buf) => {\n        ensureBytes(buf, bytesLen);\n        const res = [];\n        for (const c of lengths) {\n          const l = getLength(c);\n          const b = buf.subarray(0, l);\n          res.push(typeof c === \"number\" ? b : c.decode(b));\n          buf = buf.subarray(l);\n        }\n        return res;\n      }\n    };\n  }\n  function vecCoder(c, vecLen) {\n    const bytesLen = vecLen * c.bytesLen;\n    return {\n      bytesLen,\n      encode: (u) => {\n        if (u.length !== vecLen)\n          throw new Error(`vecCoder.encode: wrong length=${u.length}. Expected: ${vecLen}`);\n        const res = new Uint8Array(bytesLen);\n        for (let i = 0, pos = 0; i < u.length; i++) {\n          const b = c.encode(u[i]);\n          res.set(b, pos);\n          b.fill(0);\n          pos += b.length;\n        }\n        return res;\n      },\n      decode: (a) => {\n        ensureBytes(a, bytesLen);\n        const r = [];\n        for (let i = 0; i < a.length; i += c.bytesLen)\n          r.push(c.decode(a.subarray(i, i + c.bytesLen)));\n        return r;\n      }\n    };\n  }\n  function cleanBytes(...list) {\n    for (const t of list) {\n      if (Array.isArray(t))\n        for (const b of t)\n          b.fill(0);\n      else\n        t.fill(0);\n    }\n  }\n  function getMask(bits) {\n    return (1 << bits) - 1;\n  }\n\n  // node_modules/@noble/post-quantum/esm/_crystals.js\n  function bitReversal(n, bits = 8) {\n    const padded = n.toString(2).padStart(8, \"0\");\n    const sliced = padded.slice(-bits).padStart(7, \"0\");\n    const revrsd = sliced.split(\"\").reverse().join(\"\");\n    return Number.parseInt(revrsd, 2);\n  }\n  var genCrystals = (opts) => {\n    const { newPoly: newPoly2, N: N2, Q: Q2, F: F2, ROOT_OF_UNITY: ROOT_OF_UNITY2, brvBits, isKyber } = opts;\n    const mod2 = (a, modulo = Q2) => {\n      const result = a % modulo | 0;\n      return (result >= 0 ? result | 0 : modulo + result | 0) | 0;\n    };\n    const smod2 = (a, modulo = Q2) => {\n      const r = mod2(a, modulo) | 0;\n      return (r > modulo >> 1 ? r - modulo | 0 : r) | 0;\n    };\n    function getZettas() {\n      const out = newPoly2(N2);\n      for (let i = 0; i < N2; i++) {\n        const b = bitReversal(i, brvBits);\n        const p = BigInt(ROOT_OF_UNITY2) ** BigInt(b) % BigInt(Q2);\n        out[i] = Number(p) | 0;\n      }\n      return out;\n    }\n    const nttZetas = getZettas();\n    const LEN1 = isKyber ? 128 : N2;\n    const LEN2 = isKyber ? 1 : 0;\n    const NTT2 = {\n      encode: (r) => {\n        for (let k = 1, len = 128; len > LEN2; len >>= 1) {\n          for (let start = 0; start < N2; start += 2 * len) {\n            const zeta = nttZetas[k++];\n            for (let j = start; j < start + len; j++) {\n              const t = mod2(zeta * r[j + len]);\n              r[j + len] = mod2(r[j] - t) | 0;\n              r[j] = mod2(r[j] + t) | 0;\n            }\n          }\n        }\n        return r;\n      },\n      decode: (r) => {\n        for (let k = LEN1 - 1, len = 1 + LEN2; len < LEN1 + LEN2; len <<= 1) {\n          for (let start = 0; start < N2; start += 2 * len) {\n            const zeta = nttZetas[k--];\n            for (let j = start; j < start + len; j++) {\n              const t = r[j];\n              r[j] = mod2(t + r[j + len]);\n              r[j + len] = mod2(zeta * (r[j + len] - t));\n            }\n          }\n        }\n        for (let i = 0; i < r.length; i++)\n          r[i] = mod2(F2 * r[i]);\n        return r;\n      }\n    };\n    const bitsCoder2 = (d, c) => {\n      const mask = getMask(d);\n      const bytesLen = d * (N2 / 8);\n      return {\n        bytesLen,\n        encode: (poly) => {\n          const r = new Uint8Array(bytesLen);\n          for (let i = 0, buf = 0, bufLen = 0, pos = 0; i < poly.length; i++) {\n            buf |= (c.encode(poly[i]) & mask) << bufLen;\n            bufLen += d;\n            for (; bufLen >= 8; bufLen -= 8, buf >>= 8)\n              r[pos++] = buf & getMask(bufLen);\n          }\n          return r;\n        },\n        decode: (bytes2) => {\n          const r = newPoly2(N2);\n          for (let i = 0, buf = 0, bufLen = 0, pos = 0; i < bytes2.length; i++) {\n            buf |= bytes2[i] << bufLen;\n            bufLen += 8;\n            for (; bufLen >= d; bufLen -= d, buf >>= d)\n              r[pos++] = c.decode(buf & mask);\n          }\n          return r;\n        }\n      };\n    };\n    return { mod: mod2, smod: smod2, nttZetas, NTT: NTT2, bitsCoder: bitsCoder2 };\n  };\n  var createXofShake = (shake) => (seed, blockLen) => {\n    if (!blockLen)\n      blockLen = shake.blockLen;\n    const _seed = new Uint8Array(seed.length + 2);\n    _seed.set(seed);\n    const seedLen = seed.length;\n    const buf = new Uint8Array(blockLen);\n    let h = shake.create({});\n    let calls = 0;\n    let xofs = 0;\n    return {\n      stats: () => ({ calls, xofs }),\n      get: (x, y) => {\n        _seed[seedLen + 0] = x;\n        _seed[seedLen + 1] = y;\n        h.destroy();\n        h = shake.create({}).update(_seed);\n        calls++;\n        return () => {\n          xofs++;\n          return h.xofInto(buf);\n        };\n      },\n      clean: () => {\n        h.destroy();\n        buf.fill(0);\n        _seed.fill(0);\n      }\n    };\n  };\n  var XOF128 = /* @__PURE__ */ createXofShake(shake128);\n  var XOF256 = /* @__PURE__ */ createXofShake(shake256);\n\n  // node_modules/@noble/post-quantum/esm/ml-dsa.js\n  var N = 256;\n  var Q = 8380417;\n  var ROOT_OF_UNITY = 1753;\n  var F = 8347681;\n  var D = 13;\n  var GAMMA2_1 = Math.floor((Q - 1) / 88) | 0;\n  var GAMMA2_2 = Math.floor((Q - 1) / 32) | 0;\n  var PARAMS = {\n    2: { K: 4, L: 4, D, GAMMA1: 2 ** 17, GAMMA2: GAMMA2_1, TAU: 39, ETA: 2, OMEGA: 80 },\n    3: { K: 6, L: 5, D, GAMMA1: 2 ** 19, GAMMA2: GAMMA2_2, TAU: 49, ETA: 4, OMEGA: 55 },\n    5: { K: 8, L: 7, D, GAMMA1: 2 ** 19, GAMMA2: GAMMA2_2, TAU: 60, ETA: 2, OMEGA: 75 }\n  };\n  var newPoly = (n) => new Int32Array(n);\n  var { mod, smod, NTT, bitsCoder } = genCrystals({\n    N,\n    Q,\n    F,\n    ROOT_OF_UNITY,\n    newPoly,\n    isKyber: false,\n    brvBits: 8\n  });\n  var polyCoder = (d, compress) => bitsCoder(d, {\n    encode: (i) => compress ? compress(i) : i,\n    decode: (i) => compress ? compress(i) : i\n  });\n  var polyAdd = (a, b) => {\n    for (let i = 0; i < a.length; i++)\n      a[i] = mod(a[i] + b[i]);\n    return a;\n  };\n  var polySub = (a, b) => {\n    for (let i = 0; i < a.length; i++)\n      a[i] = mod(a[i] - b[i]);\n    return a;\n  };\n  var polyShiftl = (p) => {\n    for (let i = 0; i < N; i++)\n      p[i] <<= D;\n    return p;\n  };\n  var polyChknorm = (p, B) => {\n    for (let i = 0; i < N; i++)\n      if (Math.abs(smod(p[i])) >= B)\n        return true;\n    return false;\n  };\n  var MultiplyNTTs = (a, b) => {\n    const c = newPoly(N);\n    for (let i = 0; i < a.length; i++)\n      c[i] = mod(a[i] * b[i]);\n    return c;\n  };\n  function RejNTTPoly(xof) {\n    const r = newPoly(N);\n    for (let j = 0; j < N; ) {\n      const b = xof();\n      if (b.length % 3)\n        throw new Error(\"RejNTTPoly: unaligned block\");\n      for (let i = 0; j < N && i <= b.length - 3; i += 3) {\n        const t = (b[i + 0] | b[i + 1] << 8 | b[i + 2] << 16) & 8388607;\n        if (t < Q)\n          r[j++] = t;\n      }\n    }\n    return r;\n  }\n  function getDilithium(opts) {\n    const { K, L, GAMMA1, GAMMA2, TAU, ETA, OMEGA } = opts;\n    const { CRH_BYTES, TR_BYTES, C_TILDE_BYTES, XOF128: XOF1282, XOF256: XOF2562 } = opts;\n    if (![2, 4].includes(ETA))\n      throw new Error(\"Wrong ETA\");\n    if (![1 << 17, 1 << 19].includes(GAMMA1))\n      throw new Error(\"Wrong GAMMA1\");\n    if (![GAMMA2_1, GAMMA2_2].includes(GAMMA2))\n      throw new Error(\"Wrong GAMMA2\");\n    const BETA = TAU * ETA;\n    const decompose = (r) => {\n      const rPlus = mod(r);\n      const r0 = smod(rPlus, 2 * GAMMA2) | 0;\n      if (rPlus - r0 === Q - 1)\n        return { r1: 0 | 0, r0: r0 - 1 | 0 };\n      const r1 = Math.floor((rPlus - r0) / (2 * GAMMA2)) | 0;\n      return { r1, r0 };\n    };\n    const HighBits = (r) => decompose(r).r1;\n    const LowBits = (r) => decompose(r).r0;\n    const MakeHint = (z, r) => {\n      const res0 = z <= GAMMA2 || z > Q - GAMMA2 || z === Q - GAMMA2 && r === 0 ? 0 : 1;\n      return res0;\n    };\n    const UseHint = (h, r) => {\n      const m = Math.floor((Q - 1) / (2 * GAMMA2));\n      const { r1, r0 } = decompose(r);\n      if (h === 1)\n        return r0 > 0 ? mod(r1 + 1, m) | 0 : mod(r1 - 1, m) | 0;\n      return r1 | 0;\n    };\n    const Power2Round = (r) => {\n      const rPlus = mod(r);\n      const r0 = smod(rPlus, 2 ** D) | 0;\n      return { r1: Math.floor((rPlus - r0) / 2 ** D) | 0, r0 };\n    };\n    const hintCoder = {\n      bytesLen: OMEGA + K,\n      encode: (h) => {\n        if (h === false)\n          throw new Error(\"hint.encode: hint is false\");\n        const res = new Uint8Array(OMEGA + K);\n        for (let i = 0, k = 0; i < K; i++) {\n          for (let j = 0; j < N; j++)\n            if (h[i][j] !== 0)\n              res[k++] = j;\n          res[OMEGA + i] = k;\n        }\n        return res;\n      },\n      decode: (buf) => {\n        const h = [];\n        let k = 0;\n        for (let i = 0; i < K; i++) {\n          const hi = newPoly(N);\n          if (buf[OMEGA + i] < k || buf[OMEGA + i] > OMEGA)\n            return false;\n          for (let j = k; j < buf[OMEGA + i]; j++) {\n            if (j > k && buf[j] <= buf[j - 1])\n              return false;\n            hi[buf[j]] = 1;\n          }\n          k = buf[OMEGA + i];\n          h.push(hi);\n        }\n        for (let j = k; j < OMEGA; j++)\n          if (buf[j] !== 0)\n            return false;\n        return h;\n      }\n    };\n    const ETACoder = polyCoder(ETA === 2 ? 3 : 4, (i) => ETA - i);\n    const T0Coder = polyCoder(13, (i) => (1 << D - 1) - i);\n    const T1Coder = polyCoder(10);\n    const ZCoder = polyCoder(GAMMA1 === 1 << 17 ? 18 : 20, (i) => smod(GAMMA1 - i));\n    const W1Coder = polyCoder(GAMMA2 === GAMMA2_1 ? 6 : 4);\n    const W1Vec = vecCoder(W1Coder, K);\n    const publicCoder = splitCoder(32, vecCoder(T1Coder, K));\n    const secretCoder = splitCoder(32, 32, TR_BYTES, vecCoder(ETACoder, L), vecCoder(ETACoder, K), vecCoder(T0Coder, K));\n    const sigCoder = splitCoder(C_TILDE_BYTES, vecCoder(ZCoder, L), hintCoder);\n    const CoefFromHalfByte = ETA === 2 ? (n) => n < 15 ? 2 - n % 5 : false : (n) => n < 9 ? 4 - n : false;\n    function RejBoundedPoly(xof) {\n      const r = newPoly(N);\n      for (let j = 0; j < N; ) {\n        const b = xof();\n        for (let i = 0; j < N && i < b.length; i += 1) {\n          const d1 = CoefFromHalfByte(b[i] & 15);\n          const d2 = CoefFromHalfByte(b[i] >> 4 & 15);\n          if (d1 !== false)\n            r[j++] = d1;\n          if (j < N && d2 !== false)\n            r[j++] = d2;\n        }\n      }\n      return r;\n    }\n    const SampleInBall = (seed) => {\n      const pre = newPoly(N);\n      const s = shake256.create({}).update(seed);\n      const buf = new Uint8Array(shake256.blockLen);\n      s.xofInto(buf);\n      const masks = buf.slice(0, 8);\n      for (let i = N - TAU, pos = 8, maskPos = 0, maskBit = 0; i < N; i++) {\n        let b = i + 1;\n        for (; b > i; ) {\n          b = buf[pos++];\n          if (pos < shake256.blockLen)\n            continue;\n          s.xofInto(buf);\n          pos = 0;\n        }\n        pre[i] = pre[b];\n        pre[b] = 1 - ((masks[maskPos] >> maskBit++ & 1) << 1);\n        if (maskBit >= 8) {\n          maskPos++;\n          maskBit = 0;\n        }\n      }\n      return pre;\n    };\n    const polyPowerRound = (p) => {\n      const res0 = newPoly(N);\n      const res1 = newPoly(N);\n      for (let i = 0; i < p.length; i++) {\n        const { r0, r1 } = Power2Round(p[i]);\n        res0[i] = r0;\n        res1[i] = r1;\n      }\n      return { r0: res0, r1: res1 };\n    };\n    const polyUseHint = (u, h) => {\n      for (let i = 0; i < N; i++)\n        u[i] = UseHint(h[i], u[i]);\n      return u;\n    };\n    const polyMakeHint = (a, b) => {\n      const v = newPoly(N);\n      let cnt = 0;\n      for (let i = 0; i < N; i++) {\n        const h = MakeHint(a[i], b[i]);\n        v[i] = h;\n        cnt += h;\n      }\n      return { v, cnt };\n    };\n    const signRandBytes = 32;\n    const seedCoder = splitCoder(32, 64, 32);\n    return {\n      signRandBytes,\n      keygen: (seed = randomBytes2(32)) => {\n        const seedDst = new Uint8Array(32 + 2);\n        seedDst.set(seed);\n        seedDst[32] = K;\n        seedDst[33] = L;\n        const [rho, rhoPrime, K_] = seedCoder.decode(shake256(seedDst, { dkLen: seedCoder.bytesLen }));\n        const xofPrime = XOF2562(rhoPrime);\n        const s1 = [];\n        for (let i = 0; i < L; i++)\n          s1.push(RejBoundedPoly(xofPrime.get(i & 255, i >> 8 & 255)));\n        const s2 = [];\n        for (let i = L; i < L + K; i++)\n          s2.push(RejBoundedPoly(xofPrime.get(i & 255, i >> 8 & 255)));\n        const s1Hat = s1.map((i) => NTT.encode(i.slice()));\n        const t0 = [];\n        const t1 = [];\n        const xof = XOF1282(rho);\n        const t = newPoly(N);\n        for (let i = 0; i < K; i++) {\n          t.fill(0);\n          for (let j = 0; j < L; j++) {\n            const aij = RejNTTPoly(xof.get(j, i));\n            polyAdd(t, MultiplyNTTs(aij, s1Hat[j]));\n          }\n          NTT.decode(t);\n          const { r0, r1 } = polyPowerRound(polyAdd(t, s2[i]));\n          t0.push(r0);\n          t1.push(r1);\n        }\n        const publicKey2 = publicCoder.encode([rho, t1]);\n        const tr = shake256(publicKey2, { dkLen: TR_BYTES });\n        const secretKey = secretCoder.encode([rho, K_, tr, s1, s2, t0]);\n        xof.clean();\n        xofPrime.clean();\n        cleanBytes(rho, rhoPrime, K_, s1, s2, s1Hat, t, t0, t1, tr, seedDst);\n        return { publicKey: publicKey2, secretKey };\n      },\n      // NOTE: random is optional.\n      sign: (secretKey, msg2, random) => {\n        const [rho, _K, tr, s1, s2, t0] = secretCoder.decode(secretKey);\n        const A = [];\n        const xof = XOF1282(rho);\n        for (let i = 0; i < K; i++) {\n          const pv = [];\n          for (let j = 0; j < L; j++)\n            pv.push(RejNTTPoly(xof.get(j, i)));\n          A.push(pv);\n        }\n        xof.clean();\n        for (let i = 0; i < L; i++)\n          NTT.encode(s1[i]);\n        for (let i = 0; i < K; i++) {\n          NTT.encode(s2[i]);\n          NTT.encode(t0[i]);\n        }\n        const mu = shake256.create({ dkLen: CRH_BYTES }).update(tr).update(msg2).digest();\n        const rnd = random ? random : new Uint8Array(32);\n        ensureBytes(rnd);\n        const rhoprime = shake256.create({ dkLen: CRH_BYTES }).update(_K).update(rnd).update(mu).digest();\n        ensureBytes(rhoprime, CRH_BYTES);\n        const x256 = XOF2562(rhoprime, ZCoder.bytesLen);\n        main_loop: for (let kappa = 0; ; ) {\n          const y = [];\n          for (let i = 0; i < L; i++, kappa++)\n            y.push(ZCoder.decode(x256.get(kappa & 255, kappa >> 8)()));\n          const z = y.map((i) => NTT.encode(i.slice()));\n          const w = [];\n          for (let i = 0; i < K; i++) {\n            const wi = newPoly(N);\n            for (let j = 0; j < L; j++)\n              polyAdd(wi, MultiplyNTTs(A[i][j], z[j]));\n            NTT.decode(wi);\n            w.push(wi);\n          }\n          const w1 = w.map((j) => j.map(HighBits));\n          const cTilde = shake256.create({ dkLen: C_TILDE_BYTES }).update(mu).update(W1Vec.encode(w1)).digest();\n          const cHat = NTT.encode(SampleInBall(cTilde));\n          const cs1 = s1.map((i) => MultiplyNTTs(i, cHat));\n          for (let i = 0; i < L; i++) {\n            polyAdd(NTT.decode(cs1[i]), y[i]);\n            if (polyChknorm(cs1[i], GAMMA1 - BETA))\n              continue main_loop;\n          }\n          let cnt = 0;\n          const h = [];\n          for (let i = 0; i < K; i++) {\n            const cs2 = NTT.decode(MultiplyNTTs(s2[i], cHat));\n            const r0 = polySub(w[i], cs2).map(LowBits);\n            if (polyChknorm(r0, GAMMA2 - BETA))\n              continue main_loop;\n            const ct0 = NTT.decode(MultiplyNTTs(t0[i], cHat));\n            if (polyChknorm(ct0, GAMMA2))\n              continue main_loop;\n            polyAdd(r0, ct0);\n            const hint = polyMakeHint(r0, w1[i]);\n            h.push(hint.v);\n            cnt += hint.cnt;\n          }\n          if (cnt > OMEGA)\n            continue;\n          x256.clean();\n          const res = sigCoder.encode([cTilde, cs1, h]);\n          cleanBytes(cTilde, cs1, h, cHat, w1, w, z, y, rhoprime, mu, s1, s2, t0, ...A);\n          return res;\n        }\n        throw new Error(\"Unreachable code path reached, report this error\");\n      },\n      verify: (publicKey2, msg2, sig2) => {\n        const [rho, t1] = publicCoder.decode(publicKey2);\n        const tr = shake256(publicKey2, { dkLen: TR_BYTES });\n        if (sig2.length !== sigCoder.bytesLen)\n          return false;\n        const [cTilde, z, h] = sigCoder.decode(sig2);\n        if (h === false)\n          return false;\n        for (let i = 0; i < L; i++)\n          if (polyChknorm(z[i], GAMMA1 - BETA))\n            return false;\n        const mu = shake256.create({ dkLen: CRH_BYTES }).update(tr).update(msg2).digest();\n        const c = NTT.encode(SampleInBall(cTilde));\n        const zNtt = z.map((i) => i.slice());\n        for (let i = 0; i < L; i++)\n          NTT.encode(zNtt[i]);\n        const wTick1 = [];\n        const xof = XOF1282(rho);\n        for (let i = 0; i < K; i++) {\n          const ct12d = MultiplyNTTs(NTT.encode(polyShiftl(t1[i])), c);\n          const Az = newPoly(N);\n          for (let j = 0; j < L; j++) {\n            const aij = RejNTTPoly(xof.get(j, i));\n            polyAdd(Az, MultiplyNTTs(aij, zNtt[j]));\n          }\n          const wApprox = NTT.decode(polySub(Az, ct12d));\n          wTick1.push(polyUseHint(wApprox, h[i]));\n        }\n        xof.clean();\n        const c2 = shake256.create({ dkLen: C_TILDE_BYTES }).update(mu).update(W1Vec.encode(wTick1)).digest();\n        for (const t of h) {\n          const sum = t.reduce((acc, i) => acc + i, 0);\n          if (!(sum <= OMEGA))\n            return false;\n        }\n        for (const t of z)\n          if (polyChknorm(t, GAMMA1 - BETA))\n            return false;\n        return equalBytes(cTilde, c2);\n      }\n    };\n  }\n  var ml_dsa44 = /* @__PURE__ */ getDilithium({\n    ...PARAMS[2],\n    CRH_BYTES: 64,\n    TR_BYTES: 64,\n    C_TILDE_BYTES: 32,\n    XOF128,\n    XOF256\n  });\n  var ml_dsa65 = /* @__PURE__ */ getDilithium({\n    ...PARAMS[3],\n    CRH_BYTES: 64,\n    TR_BYTES: 64,\n    C_TILDE_BYTES: 48,\n    XOF128,\n    XOF256\n  });\n  var ml_dsa87 = /* @__PURE__ */ getDilithium({\n    ...PARAMS[5],\n    CRH_BYTES: 64,\n    TR_BYTES: 64,\n    C_TILDE_BYTES: 64,\n    XOF128,\n    XOF256\n  });\n\n  // src/lit-actions/test.ts\n  (async () => {\n    const res = await Lit.Actions.runOnce({\n      waitForResponse: true,\n      name: \"002-post-quantum-test\"\n    }, async () => {\n      const startTime = Date.now();\n      const pkArray = new Uint8Array(publicKey);\n      const msgArray = new Uint8Array(msg);\n      const sigArray = new Uint8Array(sig);\n      if (ml_dsa65.verify(pkArray, msgArray, sigArray)) {\n        const endTime = Date.now();\n        return endTime - startTime;\n      } else {\n        const endTime = Date.now();\n        return endTime - startTime;\n      }\n    });\n    Lit.Actions.setResponse({\n      response: JSON.stringify({\n        success: true,\n        message: res\n      })\n    });\n  })();\n})();\n/*! Bundled license information:\n\nieee754/index.js:\n  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)\n\nbuffer/index.js:\n  (*!\n   * The buffer module from node.js, for the browser.\n   *\n   * @author   Feross Aboukhadijeh <https://feross.org>\n   * @license  MIT\n   *)\n\n@noble/hashes/esm/utils.js:\n  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)\n\n@noble/post-quantum/esm/utils.js:\n  (*! noble-post-quantum - MIT License (c) 2024 Paul Miller (paulmillr.com) *)\n\n@noble/post-quantum/esm/_crystals.js:\n  (*! noble-post-quantum - MIT License (c) 2024 Paul Miller (paulmillr.com) *)\n\n@noble/post-quantum/esm/ml-dsa.js:\n  (*! noble-post-quantum - MIT License (c) 2024 Paul Miller (paulmillr.com) *)\n*/\n";
