"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.blsSessionSigVerify = void 0;
const uint8arrays_1 = require("@lit-protocol/uint8arrays");
const ethers_1 = require("ethers");
const siwe_1 = require("siwe");
const LIT_SESSION_SIGNED_MESSAGE_PREFIX = 'lit_session:';
/**
 * Verifies a BLS session signature.
 *
 * @param {Function} verifier - A wasm function that takes a public key, message, and signature to verify. NOTE: `public_key` is snake cased because it's a wasm parameter
 * @param {string} networkPubKey - The public key of the network.
 * @param {AuthSig} authSig
 * @typedef {Object} AuthSig
 * @property {string} sig - The signature in string format.
 * @property {string} signedMessage - The message that was signed.
 */
const blsSessionSigVerify = (
// TODO: refactor type with merger of PR 'https://github.com/LIT-Protocol/js-sdk/pull/503`
verifier, networkPubKey, authSig, authSigSiweMessage) => {
    let sigJson = JSON.parse(authSig.sig);
    // we do not nessesarly need to use ethers here but was a quick way
    // to get verification working.
    const eip191Hash = ethers_1.ethers.utils.hashMessage(authSig.signedMessage);
    const prefixedStr = LIT_SESSION_SIGNED_MESSAGE_PREFIX + eip191Hash.replace('0x', '');
    const prefixedEncoded = ethers_1.ethers.utils.toUtf8Bytes(prefixedStr);
    const shaHashed = ethers_1.ethers.utils.base64.encode(ethers_1.ethers.utils.sha256(prefixedEncoded));
    const signatureBytes = Buffer.from(sigJson.ProofOfPossession, `hex`);
    /** Check time or now */
    const checkTime = new Date();
    if (!authSigSiweMessage.expirationTime || !authSigSiweMessage.issuedAt) {
        throw new Error('Invalid SIWE message. Missing expirationTime or issuedAt.');
    }
    // check timestamp of SIWE
    const expirationDate = new Date(authSigSiweMessage.expirationTime);
    if (checkTime.getTime() >= expirationDate.getTime()) {
        throw new siwe_1.SiweError(siwe_1.SiweErrorType.EXPIRED_MESSAGE, `${checkTime.toISOString()} < ${expirationDate.toISOString()}`, `${checkTime.toISOString()} >= ${expirationDate.toISOString()}`);
    }
    const issuedAt = new Date(authSigSiweMessage.issuedAt);
    if (checkTime.getTime() < issuedAt.getTime()) {
        throw new siwe_1.SiweError(siwe_1.SiweErrorType.NOT_YET_VALID_MESSAGE, `${checkTime.toISOString()} >= ${issuedAt.toISOString()}`, `${checkTime.toISOString()} < ${issuedAt.toISOString()}`);
    }
    verifier(networkPubKey, shaHashed, (0, uint8arrays_1.uint8arrayToString)(signatureBytes, `base64`));
};
exports.blsSessionSigVerify = blsSessionSigVerify;
//# sourceMappingURL=validate-bls-session-sig.js.map