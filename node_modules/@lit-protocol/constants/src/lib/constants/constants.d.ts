import { LITChain, LITCosmosChain, LITEVMChain, LITSVMChain } from '@lit-protocol/types';
import { LitNetwork } from '../enums';
/**
 * Lit Protocol Network Public Key
 */
export declare const NETWORK_PUB_KEY: string;
export declare const LIT_AUTH_SIG_CHAIN_KEYS: string[];
export declare const AUTH_SIGNATURE_BODY = "I am creating an account to use Lit Protocol at {{timestamp}}";
/**
 * EVM Chains supported by the LIT protocol.  Each chain includes an optional pre-deployed token contract that you may use for minting LITs.  These are ERC1155 contracts that let you mint any quantity of a given token.  Use the chain name as a key in this object.
 * @constant
 * @type { LITEVMChain }
 * @default
 */
export declare const LIT_CHAINS: LITChain<LITEVMChain>;
/**
 * @deprecated Will be removed in version 7.x. - This is using the OLD chornicle testnet. `LIT_CHAINS['chronicleTestnet']` instead, or use `LIT_CHAINS['yellowstone']` for the new Chronicle Yellowstone Testnet (Jul 2024). (Updated to use `yellowstone` chain instead 22 July 2024)
 */
export declare const LIT_CHAIN_RPC_URL: string;
/**
 * Object containing information to submit to Metamask
 */
export declare const metamaskChainInfo: {
    /**
     * Information about the "chronicle" chain.
     */
    chronicle: {
        chainId: number;
        chainName: string;
        nativeCurrency: {
            name: string;
            symbol: string;
            decimals: number;
        };
        rpcUrls: string[];
        blockExplorerUrls: string[];
        iconUrls: string[];
    };
    /**
     * Information about the "chronicleYellowstone" chain.
     */
    yellowstone: {
        chainId: number;
        chainName: string;
        nativeCurrency: {
            name: string;
            symbol: string;
            decimals: number;
        };
        rpcUrls: string[];
        blockExplorerUrls: string[];
        iconUrls: string[];
    };
};
/**
 * Constants representing the available LIT RPC endpoints.
 */
export declare const LIT_RPC: {
    /**
     * Local Anvil RPC endpoint.
     */
    readonly LOCAL_ANVIL: "http://127.0.0.1:8545";
    /**
     * Chronicle RPC endpoint - Used for Cayenne, Manzano, Habanero
     */
    readonly CHRONICLE: "https://chain-rpc.litprotocol.com/http";
    /**
     * Chronicle Yellowstone RPC endpoint - used for >= Datil-test
     * More info: https://app.conduit.xyz/published/view/chronicle-yellowstone-testnet-9qgmzfcohk
     */
    readonly CHRONICLE_YELLOWSTONE: "https://yellowstone-rpc.litprotocol.com";
};
export declare const LIT_EVM_CHAINS: LITChain<LITEVMChain>;
/**
 * Represents the Lit Network constants.
 */
export declare const LIT_NETWORK: {
    Cayenne: string;
    Manzano: string;
    Habanero: string;
    DatilDev: string;
    DatilTest: string;
    Datil: string;
    Custom: string;
    Localhost: string;
};
/**
 * The type representing the keys of the LIT_NETWORK object.
 */
export declare type LIT_NETWORK_TYPES = keyof typeof LIT_NETWORK;
/**
 * The type representing the values of the LIT_NETWORK object.
 */
export declare type LIT_NETWORK_VALUES = (typeof LIT_NETWORK)[keyof typeof LIT_NETWORK];
/**
 * RPC URL by Network
 *
 * A mapping of network names to their corresponding RPC URLs.
 */
export declare const RPC_URL_BY_NETWORK: {
    [key in LIT_NETWORK_VALUES]: string;
};
/**
 * Mapping of network names to their corresponding relayer URLs.
 */
export declare const RELAYER_URL_BY_NETWORK: {
    [key in LIT_NETWORK_VALUES]: string;
};
/**
 * Mapping of network values to corresponding Metamask chain info.
 */
export declare const METAMASK_CHAIN_INFO_BY_NETWORK: Record<LIT_NETWORK_VALUES, typeof metamaskChainInfo.chronicle | typeof metamaskChainInfo.yellowstone>;
export declare const HTTP = "http://";
export declare const HTTPS = "https://";
/**
 * Mapping of network values to corresponding http protocol.
 */
export declare const HTTP_BY_NETWORK: Record<LIT_NETWORK_VALUES, typeof HTTP | typeof HTTPS>;
/**
 * Mapping of network values to their corresponding centralisation status.
 */
export declare const CENTRALISATION_BY_NETWORK: Record<LIT_NETWORK_VALUES, 'centralised' | 'decentralised' | 'unknown'>;
/**
 * Solana Chains supported by the LIT protocol.  Use the chain name as a key in this object.
 * @constant
 * @type { LITSVMChain }
 * @default
 */
export declare const LIT_SVM_CHAINS: LITChain<LITSVMChain>;
/**
 * Cosmos Chains supported by the LIT protocol.  Use the chain name as a key in this object.
 * @constant
 * @type { LITCosmosChain }
 * @default
 */
export declare const LIT_COSMOS_CHAINS: LITChain<LITCosmosChain>;
/**
 * All Chains supported by the LIT protocol.  Use the chain name as a key in this object.
 * @type { LITChain<LITEVMChain | LITSVMChain | LITCosmosChain> }
 */
export declare const ALL_LIT_CHAINS: LITChain<LITEVMChain | LITSVMChain | LITCosmosChain>;
/**
 * Local storage key constants
 */
export declare const LOCAL_STORAGE_KEYS: {
    AUTH_COSMOS_SIGNATURE: string;
    AUTH_SIGNATURE: string;
    AUTH_SOL_SIGNATURE: string;
    WEB3_PROVIDER: string;
    KEY_PAIR: string;
    SESSION_KEY: string;
    WALLET_SIGNATURE: string;
};
/**
 * Symmetric key algorithm parameters
 */
export declare const SYMM_KEY_ALGO_PARAMS: {
    name: string;
    length: number;
};
/**
 * Default node URL for Cayenne network
 */
export declare const CAYENNE_URL = "https://cayenne.litgateway.com";
/**
 * Default node URLs for each LIT network
 * Note: Dynamic networks such as Habanero have no default node URLS; they are always
 * loaded from the chain during initialization
 */
export declare const LIT_NETWORKS: {
    [key in LitNetwork]: string[];
} & {
    localhost: string[];
    internalDev: string[];
};
export declare const LIT_SESSION_KEY_URI = "lit:session:";
export declare const AUTH_METHOD_TYPE_IDS: {
    WEBAUTHN: number;
    DISCORD: number;
    GOOGLE: number;
    GOOGLE_JWT: number;
};
export declare const PKP_CLIENT_SUPPORTED_CHAINS: string[];
export declare const SIWE_DELEGATION_URI = "lit:capability:delegation";
/**
 * @deprecated Will be removed in version 7.x. - Use RELAYER_URL_BY_NETWORK.Cayenne instead
 */
export declare const RELAY_URL_CAYENNE = "https://relayer-server-staging-cayenne.getlit.dev";
/**
 * @deprecated Will be removed in version 7.x. - Use RELAYER_URL_BY_NETWORK.Habanero instead
 */
export declare const RELAY_URL_HABANERO = "https://habanero-relayer.getlit.dev";
/**
 * @deprecated Will be removed in version 7.x. - Use RELAYER_URL_BY_NETWORK.Manzano instead
 */
export declare const RELAY_URL_MANZANO = "https://manzano-relayer.getlit.dev";
/**
 * @deprecated Will be removed in version 7.x. - Use RELAYER_URL_BY_NETWORK.DatilDev instead
 */
export declare const RELAY_URL_DATIL_DEV = "https://datil-dev-relayer.getlit.dev";
/**
 * @deprecated Will be removed in version 7.x. - Use RELAYER_URL_BY_NETWORK.DatilTest instead
 */
export declare const RELAY_URL_DATIL_TEST = "https://datil-test-relayer.getlit.dev";
export declare const LIT_ACTION_IPFS_HASH = "QmUjX8MW6StQ7NKNdaS6g4RMkvN5hcgtKmEi8Mca6oX4t3";
export declare const FALLBACK_IPFS_GATEWAYS: string[];
